// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId           String       @id @default(uuid())
  name             String
  email            String       @unique
  password         String
  role             String       @default("user") //owner | admin | user
  image            String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  adminRestaurants Restaurant[] @relation("Admin")
  ownerRestaurants Restaurant[] @relation("Owners")
  bookings         Booking[]    @relation("UserToBooking")
}

model Restaurant {
  restaurantId String    @id @default(uuid())
  name         String
  isActive     Boolean   @default(false)
  adminId      String?
  admin        User?     @relation("Admin", fields: [adminId], references: [userId])
  owners       User[]    @relation("Owners")
  tables       Table[]   @relation("RestaurantToTable")
  images       Image[]   @relation("RestaurantToImage")
  bookings     Booking[] @relation("RestaurantToBooking")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  @@index([adminId], name: "adminIndex")
}

model Table {
  tableId      String     @id @default(uuid())
  restaurantId String
  restaurant   Restaurant @relation("RestaurantToTable", fields: [restaurantId], references: [restaurantId])
  capacity     Int
  isBooked     Boolean    @default(false)
  bookings     Booking[]  @relation("TableToBooking")

  @@index([restaurantId])
}

model Booking {
  bookingId    String     @id @default(uuid())
  date         DateTime
  numPeople    Int
  isActive     Boolean    @default(true)
  userId       String
  user         User       @relation("UserToBooking", fields: [userId], references: [userId])
  restaurantId String
  restaurant   Restaurant @relation("RestaurantToBooking", fields: [restaurantId], references: [restaurantId])
  tableId      String
  table        Table      @relation("TableToBooking", fields: [tableId], references: [tableId])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId])
  @@index([restaurantId])
  @@index([tableId])
}

model Image {
  imageId      String     @id @default(uuid())
  restaurantId String
  restaurant   Restaurant @relation("RestaurantToImage", fields: [restaurantId], references: [restaurantId])
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}
